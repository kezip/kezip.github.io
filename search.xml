<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端兼容性问题总结]]></title>
    <url>%2F2017%2F10%2F24%2F%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前端兼容性问题总结1.如何在IE6及更早浏览器中定义小高度的容器？ IE6及更早浏览器之所以无法直接定义较小高度的容器是因为默认会有行高。 解决方法： 123456#test&#123; overflow: hidden; height: 1px; font-size: 0; line-height: 0;&#125; 2.如何解决IE6及更早浏览器浮动是产生双倍边距的bug? 在IE6及更早浏览器出现浮动后margin值解析为双倍的情况，设置改元素的display属性为inline即可。 解决方法： 123#test&#123; _display：inline;//只有IE6 识别&#125; 3.如何在IE6及更早浏览器下模拟min-height效果？ 解决: 12345678910111213#test&#123; min-htight: 100px; _height: 100px;&#125;//注意此时#test不能再设置overflow的值为hidden,否则模拟min-height效果将失效。//或者是：#test&#123; min-height: 100px; height: auto !important; height: 100px; overflow: visible;&#125;//因为IE6有一个特性，当定义一个高度时，如果内容超过高度，元素会自动调整高度。 4.如何解决按钮在IE7及更早浏览器下随着value增多两边留白也随着增加的问题？ 解决方法： 123input,button&#123; *overflow: visible;//IE6、IE7 识别&#125; 5.如何解决IE7及更早浏览器下当li中出现2个或以上的浮动时，li之间产生的空白间隙的bug? 解决方法： 1234#test&#123; *vertical-align: top;&#125;//除了top值，还可以设置为text-top|middle|bottom|text-bottom,甚至特定的&lt;length&gt;和&lt;percentage&gt;值都可以。 6.如何解决IE6及更早浏览器下的3像素BUG? 解决方法： 12345678910111213141516171819.mian&#123; width: 950px; background: #ccc;&#125;.content&#123; float: left; width: 750px; height: 100px; background: #eee; _margin-right: -3px;&#125;.aside&#123; height: 100px; background: #aaa;&#125;&lt;div class=&quot;main&quot;&gt;&lt;div class=&quot;content&quot;&gt;content&lt;/div&gt;&lt;/div&gt;//在IE6及更早浏览器下为.content设置margin-right: -3px;也可以设置.aside为浮动，最好设置为浮动。 7.如何解决IE6下的文本溢出bug? 解决方法： 123456789101112131415161718192021222324.test&#123; zoom: 1; overflow: hidden; width: 500px;&#125;.box1&#123; float: left; width: 100px;&#125;.box2&#123; float: right; width: 300px;&#125;&lt;div class=&quot;test&quot;&gt; &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt; &lt;!--注释内容--&gt; &lt;div class=&quot;box2&quot;&gt;这就是多出来的那部分&lt;/div&gt;&lt;/div&gt;//运行如上代码，你会发现文字发生了溢出，在IE6下会多出一部分来。造成此bug的原因可能是多重混合的，如浮动，注释，宽高定义等等。并且注释条数越多，溢出的文本也会随之增多。//解决的几个方法： //1.删除box1和box2之间所有的注释。 //2.不设置浮动。 //3.调整box1或box2的宽度，比如将box的宽度调整为90px. 8.如何解决IE6使用滤镜PNG图片透明后，容器内连接失效的问题？ 解决方法： 123456789div&#123; _filter:progid:DxImagesTransform.Microsoft.AlphalmageLoader(src=&quot;*.png&quot;); width: 300px; height: 100px;&#125;a&#123; _position:relative;&#125;//解决方法是为容器内的链接定义相对定位属性position的值为relative 9.如何解决IE6无法识别伪对象:first-letter/:first-line的问题？ 解决方法： 12345678910111213//1.增加空格：在伪对象选择符：first-letter/:first-line与包含规则的花括号“&#123;”间增加空格。p:first-letter &#123; float:left; font-size: 40px; font-weight:bold;&#125;p:first-line&#123;color:#090;&#125;//2.换行：将整个花括号“&#123;”规则区域换行。细节参见E:first-letter和E：first-line选择符p:first-letter&#123;float:left;font-size:40px;font-weight:bold;&#125;p:first-line&#123;color:#090;&#125;//伪类中的连字符“-”。IE有个bug，在处理伪类时，如果伪类的名称中带有连字符“-”，伪类名称后面就得跟一个空格，不然样式的定义就无效。 10.如何解决IE8会忽略伪对象:first-letter/:first-line里的！important规则的问题？12p:first-letter &#123;float:left;font-size:40px;font-weight:bold;color:#f00!important;color:#090;&#125;//如上代码，在IE8下color定义都会失效，原因就是因为有color使用了！important规则，鉴于此，亲尽量不要在:first-letter/:first-line里使用!important规则。 11.如何解决IE6会忽略同一条样式体内的！important规则的问题？12345div&#123;color:#f00!important;color:#000;&#125;//如上代码，IE6及以下浏览器div的文本颜色为#000,!important并没有覆盖后面的规则，也就是说!important被忽略了。解决方案是将样式拆分为2条，请看下一条。div&#123;color:#f00!important;&#125;div&#123;color:#000;&#125;//在上述代码中，IE6及以下浏览器中div的文本颜色表现与其它浏览器一致，都为#f00. 12.如何解决IE6及更早浏览器下当li内部元素是定义了display:block的内联元素时底部产生空白的问题？1234567a,span&#123;display:block;background:#ccc;&#125;&lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://css.doyoe.com/&quot;&gt;CSS参考手册&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://blog.doyoe.com/&quot;&gt;CSS探索之旅&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://demo.doyoe.com/&quot;&gt;web前端实验室&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;//如上代码，IE6及更早浏览器每个li内部的内联元素底部都会产生空白。解决方案是给li内部的内联元素再加上zoom:1. 13.如何解决IE6及更早浏览器下未定义宽度的浮动或绝对定位元素会被内部设置了zoom:1的块元素撑开的问题？1234567891011121314151617181920#test&#123;zoom:1;overflow:hidden;border:1px solid #ccc;background:#aaa;&#125;#test h1&#123;float:left;&#125;#test .nav&#123;float:right;background:#bbb;&#125;#test .nav ul&#123;zoom:1;overflow:hidden;margin:0;padding:0;list-style:none;&#125;#test .nav li&#123;float:left;margin:0 5px;&#125;&lt;div id=&quot;test&quot;&gt; &lt;h1&gt;h1标签&lt;/h1&gt; &lt;div class=&quot;nav&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.baidu.com/&quot;&gt;百度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.google.com/&quot;&gt;谷歌&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.firefox.com/&quot;&gt;火狐&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;//如上代码，IE6及更早浏览器div.nav会被设置了zoom：1的ul给撑开。//解决的几个方法： //1.设置ul为浮动元素 //2.设置ul为inline元素 //3.设置uld的width 14.如何解决IE7及更早浏览器下子元素相对定位时父元素overflow属性的auto|hidden失效的问题？1234567div&#123;overflow:auto;width:230px;height:90px;border:1px solid #eee;&#125;p&#123;position:relative;margin:0;&#125;&lt;div&gt; &lt;p&gt;如果我是相对定位，我的父元素overflow属性设置为auto|hidden将失效。如果你使用的是IE及更早浏览器，你将可以看到这个bug&lt;/p&gt; &lt;p&gt;如果我是相对定位，我的父元素overflow属性设置为auto|hidden将失效。如果你使用的是IE及更早浏览器，你将可以看到这个bug&lt;/p&gt;&lt;/div&gt;//如上代码，在ie7及更早浏览器下你会看到div的滚动条将无法工作.解决方案是给div也设置相对定位position:relative. 15.如何解决Chrome在应用transition时页面闪动的问题？解决方法：12-webkit-backface-visibility: hidden;//（设置进行转换的元素的背面在面对用户时是否可见：隐藏）-webkit-transform-style: preserve-3d; //（设置内嵌的元素在 3D 空间如何呈现：保留 3D ） 16.不同浏览器的标签默认的外补丁和内补丁不同，各个浏览器对margin和padding的解析不一致？12//设置*&#123;margin:0;padding:0;&#125; 17.行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug?12//行内属性标签，为了设置宽高，我们需要设置display:block;(除了input标签比较特殊)。在用float布局并有横向的margin后，在IE6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:table;//在display:block;后面加入*display:inline;*display:table 18.几个img标签放在一起的时候，有些浏览器会有默认的间距，加了通配符也不起作用？12//使用float属性为img布局(尽量使用)//如果使用margin,可能会引起兼容问题(不建议使用) 19.火狐与IE对盒模型的解析不一致？12//使用：box-sizing: border-box; 20.在mozilla firefox和IE中的盒模型解析不一致，导致相差2px解决方法？1234div&#123;margin:30px!important;margin:28px;&#125;//注意这两个margin的顺序一定不能写反，!important这个属性IE不能识别，但别的浏览器可以识别，所以IE下其实解析成这样：div&#123;margin:30px;margin:28px;&#125;//重复定义的话按照最后一个来执行，所以不可以只写margin:xxpx!important; 21.ul和ol列表缩进问题？123//消除ul、ol等列表的缩进时，样式应写成：list-style:none;margin:0px;padding:0px;//其中margin属性对IE有效，padding属性对FireFox有效。//在IE中，设置margin:0px;可以去除列表的上下左右缩进、空白以及列表编号或圆点，设置padding对样式没有影响；在Firefox中，设置margin:0px;仅仅可以去除掉上下的空白，设置padding:0px后仅仅可以去掉左右缩进，还必须设置list-style:none才能去除列表编号或圆点。也就是说，在IE中仅仅设置margin:0px即可达到最终效果，而在firefox中必须同时设置margin:0px;padding:0px;以及list-style:none;三项才能达到最终效果。 22.字体大小定义不同？123//对字体大小small的定义不同，Firefox中为13px,而IE中为16px,差别很大。//解决方法： 使用指定的字体大小如：16px.//并列排列的对个元素(图片或者链接)的div和div之间，代码中的空格和回车在firefox中都会被忽略，而IE中却默认显示为空格(约3px). 23.CSS双线凹凸边框？1234567IE: border:2px outset;FF: -moz-border-top-colors:#d4d0c8 white; -moz-border-left-colors:#d4d0c8 white; -moz-border-right-colors:#303030 #606060; -moz-border-bottom-colors:#303030 #60060; 24.IE6里面：如li设宽高，并且li 里面的标签浮动，那么li之间会有间距？12//li不设宽、高或者li内的标签不浮动*float:none; 25.当定义行内元素为包含框时，且包含框包含的绝对定位元素以百分比为单位进行定位时，会出现混乱？1//在行内元素里加入&#123;zoom:1&#125; 26.当多个浮动元素中间夹杂着HTML注释语句时，如果浮动元素宽度为100%，则在下一行多显示一个上一行最后一个字符？1//给浮动元素添加： display:inline; 27.IE6不支持fixed12345678910111213141516171819202122232425262728293031323334#top&#123; position:fixed; bottom:0; right:20px;&#125;#top&#123; position:fixed; _position:absolute; top:0; right:20px; _bottom:auto; _top:expression(eval(document.documentElement.scrollTop));&#125;#html&#123; backgroud-image:url(about:blank); background-attachment:fixed;&#125;#top&#123; position:absolute; _bottom:auto; _top:expression(eval(document.documentElement.scrollTop));&#125;#top&#123; _position:absolute; _bottom:auto; _top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseint(this.currentStyle.marginTop)||0)-(paresint(this.currentStyle.marginBottom)||0)));&#125;#top&#123; position:fixed; top:50%; margin-top:-50px; _position:absolute; _top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight/2));&#125; 28.解决IE6最大、最小宽高hack方法？12345678910111213141516.min_width&#123; min-width:300px; _width:expression(parsrint(this.cliemtWidth)&lt;300?&quot;300px&quot;:this.clientWidth);&#125;.max_width&#123; max-width:600px; _width:expression(parsrint(this.cliemtWidth)&lt;600?&quot;600px&quot;:this.clientWidth);&#125;.min_height&#123; min-height:300px; _height:expression(parsrint(this.cliemtHeight)&lt;300?&quot;300px&quot;:this.clientHeight);&#125;.max_height&#123; max-height:600px; _height:expression(parsrint(this.cliemtHeight)&lt;600?&quot;600px&quot;:this.clientHeight);&#125; 29.z-index不起作用的bug?12345671.ie6下首先讲讲第一种z-index无论设置多高都不起作用情况。 这种情况发生的条件有： a.父标签position属性为relative. b.问题标签含有浮动(float)属性。2.所有浏览器：它只认第一个粑粑。 层级的高低地不仅要看自己，还要看自己的粑粑这个后台是否够硬，具体描述为： 父标签position属性为relative或者absolute时，子标签的absolute属性是相对父标签而言的.而在IE6下，层级的表现有时候不是看子标签的z-index多高，而要看他们的父标签的z-index谁gao谁低。 30.CSS选择器区分123//IE6不支持子选择器，先针对IE6使用常规声明CSS选择器，然后再用子选择器(针对IE7+及他浏览器).content&#123;color:red;&#125;div&gt;p.content&#123;color:blue;&#125; 31.以下三种其实是同一个bug,其实也不算是个bug，举例：父标签高度20，子标签11，垂直居中，20-11=9，9要分给文字的上面与下面，怎么分？IE6就会与其它的不同，所以，尽量避免。123456a).字体大小为奇数之边框高度少1px. 解决方法：字体大小设置为偶数或line-height为偶数。b).line-height,文本垂直居中差1px. 解决方法：padding-top代替line-height居中，或line-height加1或减1.c).与父标签的宽度的奇偶不同的居中造成1px的偏离。 解决方法：如果父标签是奇数宽度，则子标签也用奇数宽度；如果父标签偶数宽度，则子标签也用偶数宽度。 32.左浮元素margin-bottom失效1解决方法：显示设置高度or父标签设置_padding-bottom代替子标签的margin-bottom 再放个标签让父标签浮动，子标签margin-bottom,即(margin-bottom与float不同时作用于一个标签)。 33.内部盒模型超出父级时，父级被撑大。1父标签使用 overflow:hidden; 34.块元素中有文字及右浮动的行元素，行元素换行。1将行元素置于块元素类的文字前 35.position下的left,bottom错位1为父级(relative层)设置宽高或添加*zoom:1 36.子及中有设置position,则父级overflow失效1为父级设置position：relative; 37.IE6背景闪烁123 如果你给链接、按钮用CSS sprites作为背景，你可能会发现在IE6下会有背景图闪烁的现象。造成这个的原因是由于IE6没有见背景图缓存，每次触发hover的实惠都会重新加载，可以用javacript设置缓存这些图片：document.execCommand(&quot;BackgroundImageCache&quot;,false,true); 38.100%高度1在IE6下，如果要给元素定义100%高度，必须要明确定义它的父级元素的高度，如果你需要给元素定义满屏的高度，就得先给html和body定义height:100%; 39.浮动层错位12当内容超出外包容器定义的宽度时，在IE6中容器会忽视定义的width值宽度会错误地随内容宽度增长而增长。浮动层错位问题在IE6下没有真正让人满意的解决方法，虽然可以使用overflow:hidden;或overflow:scroll;来修正，但hidden容易导致其他一些问题，scroll会破坏设计；javascript也没法很好地解决这个问题。所以建议是一定要在布局上避免这个问题发生，使用一个固定的布局或者控制好内容的宽度(给内层加width). 40.躲猫猫bug1234在IE6和IE7下，躲猫猫bug是一个非常恼人的问题。一个撑破了容器的浮动元素，如果在他之后有不浮动的内容，并且有一些定义了：hover的链接当鼠标移到那些链接上时，在IE6下就会触发躲猫猫。//解决方法很简单：a).在那个未浮动的内容之后添加一个&lt;span style=&quot;clear:both;&quot;&gt;&lt;/span&gt;b).触发包含了这些链接的容器的hasLayout,一个简单的方法就是给其定义height:1%; 41.绝对定位元素的1像素间距bug1IE6下的这个错误时由于进位处理错误造成(IE7已修复)，当绝对定位元素的父元素高或宽为奇数时，bottom和right会产生错误。唯一的解决办法就是给父元素定义明确的高宽值。 42.overflow BUG12在IE6/7中，overflow无法正确的隐藏有相对定位position:relative;的子元素。解决方法就是：给外包容器wrap加上position:relative; 43.横向列表宽度bug123如果你使用float:left;把&lt;li&gt;横向摆列，并且&lt;li&gt;内包含的&lt;a&gt;(或者其他)的触发了hasLayout,在IE6下就会有错误的表现。解决方法： 只需要给&lt;a&gt;定义同样的float：left;即可。 44.垂直列表间隙bug123当我们使用&lt;li&gt;包含一个块级元素时，IE6(IE7也有可能)会错误地给每条列表元素(&lt;li&gt;)之间添加空隙。解决方法： 把&lt;a&gt;float并且清除float来解决这个问题；另外一个办法就是触发&lt;a&gt;的hasLayout(如定义高度、使用zoom：1;)；也可以给&lt;li&gt;定义display:inline;来解决此问题；另外还有一个极有趣的方法，给包含的文本添加一个空格。 45.IE6中的：hover1在IE6中，除了(需要有href属性)才能触发：hover行为，这妨碍了我们实现许多鼠标触碰效果，但还是有一些法子可以解决它的。最好是不要用：hover来实现重要的功能，仅仅只用它来强化效果。 46.IE6调整窗口大小的BUG123当把body居中放置，改变IE浏览器大小的时候，任何在body里面的相对定位元素都会固定不动了。解决方法： 给body定义position:relative; 47.文本重复bug123在IE6中，一些隐藏的元素(如注释、display:none;的元素)被包含在一个浮动元素里，就有可能引发文本重复bug.解决办法: 给浮动元素添加：display:inline; 48.IE捉迷藏的问题123当div应用复杂的时候每个栏中又有一些链接，div等这个时候容易发生捉迷藏的问题。有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。解决办法： 对#layout使用line-height属性或者#layout使用固定高和宽。页面结构尽量简单。 49.高度不适应123456高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用margin或padding时。例如：#box&#123;background-color:#ccc;&#125;#box p&#123;margin-top:20px;margin-bottom:20px;text-align:center;&#125;&lt;div id=&quot;box&quot;&gt;&lt;p&gt;p对象中的内容&lt;/p&gt;&lt;/div&gt;解决方法： 在p对象上下各加2个空的div对象，或者为div加上border属性。 50.怎样使一个层垂直居中于浏览器中12345678910这里我们使用百分比绝对定位，与外补丁负值的方法，负值的大小为其自身宽度高度除以2。div&#123; position：absolute; top:50%; left:50%; margin:-100px 0 0 -100px; width:200px; height:200px; border: 1px solid blue;&#125; 51.FireFox下如何使连续长字段自动换行1234567891011121314151617众所周知IE中直接使用word-wrap:break-word;FF中我们使用JS插入&amp;#10;的方法来解决。&lt;script type=&quot;text/javascript&quot;&gt;function toBreakWord(el,intLen)&#123; var obj = document.getElementById(el); var strContent = obj.innerHTML; var strTemp = &quot;&quot;; while(strContent.length&gt;intLen)&#123; strTemp += strContent.substr(0,intLen)+&quot;&amp;#10;&quot;; strContent = strContent.substr(intLen.strContent.length); &#125; strTEMP += &quot;&amp;#10;&quot;+strContent; obj.innerHTML = strTemp;&#125;if(document.getElementById &amp;&amp; !document.all)toBreakWord(&quot;ff&quot;,37);&lt;/script&gt; 52.经常会用到CSS的position:absolute来使层浮动前通过left,top,right等属性来对层进行定位，但ie6对left,top,right等属性的解析和ie7，ie8及firefox,chrome等不一致。1在父层使用position:relative;和padding(当然0值除外)后，ie6中层的定位起始坐标是从padding后的位置算起，而其他则从层的真实位置算起，而非被padding:absolute进行层定位时ie6与其他浏览器的表现不一样。 53.绝对定位居中，兼容IE9+12345678.posCenter&#123; position:absolute; top：50%； left: 50%; -webkit-transform:translate(-50%,-50%); -moz-transform:translate(-50%,-50%); transform:translate(-50%,-50%);&#125;]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发兼容性问题 问题总结 兼容性 ie6、ie7、ie8等</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js基础--函数]]></title>
    <url>%2F2017%2F10%2F22%2Fjs%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[一、函数1.1函数声明js中可以通过以下三种方法定义函数：a.自定义函数b.直接量声明(函数式表达式声明)12345678910111213使用Function函数构造法(参数必须加引号)。区别： 自定义函数和直接量声明是有区别的，自定义函数调用在定义之前之后都是可以的；而直接量声明只能在声明函数之后调用，否则会报错(像下面的fun2就会报错)： //1.自定义函数 function fun1()&#123;alert(&apos;这是自定义函数&apos;);&#125; //函数声明之后需要调用，不然不会自动执行，执行函数可以在声明之后。//fun1(); //2.直接量声明 fun2(); //调用函数 var fun2 = function()&#123;alert(&apos;这是直接量声明&apos;);&#125; //3.使用Function关键字 var fun3 = new Function(&apos;var a = 10,b = 20;alert(a+b);&apos;); fun3(); 1.2变量提升变量提升指的是在函数体内会把变量的声明提升到函数的最前面 ，只声明但是并不给变量赋值。例如：1234567891011121314151617181920function fun()&#123; console.log(num); var num = 20;&#125;;//相当于：function fun()&#123; var num; console.log(num); num = 20;&#125;;//所以结果，这里会报undefined的异常。//下面的输出结果是undefined和20，就是执行了变量提升，尽管前面声明了num,但是在函数里面先声明num,而没有给赋值。var num = 10;function fun1()&#123; alert(num); var num = 20; alert(num);&#125;;fun1();//调用函数 1.3函数参数a.在创建函数的同时会创建一个arguments对象用来存储函数调用是传过来的实参，arguments对象的长度由传过来的个数决定。函数名.length可以获取函数形参的个数。根据这一方法可以判断实参和形参个数是否相同。函数实参个数多于形参个数可以调用，小于则会报错(相当于一个形参undefined)123456function fun(a,b)&#123; console.log(a+b);&#125;;fun(2,3);//5fun(6);//NaNfun(3,4,5)//7 b.下面判断形参和实参个数123456789function fun(a,b)&#123; if(fun.length == argruments.length)&#123; console.log(a+b); &#125;else&#123; console.error(&apos;传递的参数不匹配&apos;); &#125;;&#125;;fun(2,3);//5fun(2,3,4)//传递参数不匹配 1.4两种定义变量的区别123var a = 1,b = 1;var a = b = 1;//前者相当于var a = 1;var b = 1;两个变量均是局部变量。而后一个是a是局部变量，b则是全局变量(隐式的全局变量)。var a = 1和a = 1前者如果是在函数内声明属于全局变量，后者跟上面说的一样，属于隐式的全局变量。 1.5 returnreturn有两个作用：一是设置返回值，另一个是终止代码的执行。在函数内部使用return来设置返回值，一个函数只能有一个返回值，自定义的函数默认没有返回值。同时return后跟逗号可以终止代码的执行(比如提交表单之前的校验)。1234567function fun(a,b)&#123; if(a&gt;b)&#123; return;//如果后面直接跟分号，是终止当前函数的执行。 &#125; return a+b;&#125;console.log(fun(3,5)); 1.6 ++运算i++: 先使用i,执行完再运算 i= i+1；++i先执行i=i+1,然后在执行运算。12345var a = 10,b = 20,c = 30;++a;a++;e = ++a+(++b)+(c++)+a++;alert(e);//77 1.7 thisthis自己的，主要指事件的调用者。innerHTML更换盒子的内容value获取和设置表单的的值，下面说一个小技巧，页面加载完毕之后自动获取焦点(例如百度搜索)，鼠标滑过之后自动选中文本内容，便于用户删除搜索框的内容dom.focus()获取dom焦点,onfocus()获取焦点触发事件，dom.select()选中dom。12345678910111213141516171819202122&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;两个表单小方法&lt;/title&gt; &lt;script&gt; window.onload = function()&#123; //页面加载完毕自动获取焦点 var focus = document.getElementById(&quot;focus&quot;); focus.focus(); //鼠标经过自动选中文本内容，方便用户删除 var sel = document.getElementById(&quot;sel&quot;); sel.onmouseover = function()&#123; this.select(); //this指事件调用者 &#125;; &#125;; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;test&quot; id=&quot;focus&quot;&gt; &lt;br&gt; &lt;input type=&quot;test&quot; id=&quot;sel&quot;&gt;&lt;/body&gt; 1.8输入框表单校验(基本的表单校验)123456789101112131415161718192021222324252627282930&lt;script&gt; window.onload = function()&#123; var tet = document.getElementById(&apos;name&apos;); tet.onfocus = function()&#123; //清空this.value = &quot;&quot;; &#125; //失去焦点判断输入内容 tet.onblur = fucntion()&#123; if(this.value == &quot;&quot;)&#123; this.value = &quot;请输入。。。。。&quot;; &#125; &#125; document.gtElementsTagName(&apos;button&apos;)[0].onclick = function()&#123; if(tet.value == &quot;&quot; || tet.value == &quot;请输入....&quot;)&#123; tet.value = &quot;请输入....&quot;; alert(&quot;请输入内容&quot;); return; //终止执行代码继续向下执行 &#125; alert(&quot;正在搜索，请稍后&quot;); &#125; &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;search&quot;&gt; &lt;input type=&quot;text&quot; value=&quot;请输入...&quot; id=&quot;name&quot;&gt; &lt;button&gt;&lt;/button&gt; &lt;/div&gt;&lt;/body&gt; 1.9金字塔在页面输出一个金字塔的形状，可以使用for循环,使用百分比来控制hr的宽度。1234567&lt;script&gt; for(i=1;i&lt;=100;i++)&#123; document.write(&apos;&lt;hr wridth=&apos;+i+&apos;%&gt;&apos;); &#125;&lt;/script&gt;&lt;body&gt;&lt;/body&gt;]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript基础 函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发企业级css常用命名，书写规范总结]]></title>
    <url>%2F2017%2F10%2F22%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BC%81%E4%B8%9A%E7%BA%A7css%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D%EF%BC%8C%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[一、css常用命名规范1、常用命名 12345678910111213141516171819202122232425262728293031323334353637标题：title摘要：summary箭头：arrow商标：label网站标志：logo转角/圆角：corner横幅广告：banner子菜单：subMenu搜索：search搜索框：searchBox登录：login登录条：loginbar工具条：toolbar下拉：drop标签页：tab当前页：current列表：list滚动：scroll服务：service提示信息：msg热点：hot新闻：news小技巧：tips下载：download栏目标题：title加入：joinus注册：regsiter指南：guide友情链接：friendlink状态：status版权：copyright按钮：btn合作伙伴：partner投票：vote左/右/中：left/right/center简介：profiles评论：comment 2、ID命名(1)页面结构 12345678910容器：container页头：header内容：content/container页面主体：main页尾：footer导航：nav侧栏：sidear栏目：column页面外围控制整体布局宽度：wrapper左/右/中：left/right/center (2)导航 1234567891011导航：nav主导航：mainbav子导航：subnav顶导航：topnav边导航：sidebar左导航：leftsidebar右导航：rightsidebar菜单：menu子菜单：submenu标题：title摘要：summary (3)功能 12345678910111213141516171819202122232425262728标志：logo广告：banner登录：login登录条：loginbar注册：regsiter搜索：search功能区：shop标题：title加入：joinus状态：status按钮：btn滚动：scroll标签页：tab文章列表：list提示信息：msg当前的：current小技巧：tips图标：icon注释：note指南：guild服务：service热点：hot新闻：news下载：download投票：vote合作伙伴：partner友情链接：link版权：copyright 3、class命名(1)颜色：使用颜色的名称或者16进制代码，如： 123.red&#123;color:red;&#125;.f60&#123;color:#60;&#125;.ff8600&#123;color:#ff8600;&#125; (2)字体大小：直接使用“font+字体大小”作为名称，如： 12.font12px&#123;font-size:12px;&#125;.font9pt&#123;font-size:9pt;&#125; (3)对齐样式：使用对齐目标的英文名称，如： 12.left&#123;float:left;&#125;.bottom&#123;float:bottom;&#125; (4)标题栏样式：使用”类别+功能”的方式命名，如： 12.barnews&#123;&#125;.barproduct&#123;&#125; 二、推荐的css书写顺序—–相关的属性声明应当归为一组，并按照下面的顺序排列：1234PositioningBox modelTypographicVisual —–由于定位(positioning)可以从正常的文档流中移除元素，并且还能覆盖盒模型(box model)相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。1234567891011121314151617181920212223242526xxx&#123; /*Positioning*/ position:absolute; top:0; right:0; bottom:0; left:0; z-index:100; /*Box model*/ dispaly:block; float:right; width:100px; height:120px; /*Typography*/ font:normal 16px &quot;Helvetica Neue&quot;,sans-serif; line-height:1.5; color: #ccc; text-align:center; /*Visual*/ background-color:#009480; border:1px solid skybule; border-radius: 5px;&#125;]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>css常用命名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决端口占用的方法：Error:listen EADDRINUSE]]></title>
    <url>%2F2017%2F10%2F20%2F%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9AError-listen-EADDRINUSE%2F</url>
    <content type="text"><![CDATA[《问题描述》在进行代码调试时，很容易出现端口占用的情况。——-解决方法： 12341.在命令行中输入：netsat -aon|findstr &quot;xxxx&quot;,如(8080)找到端口号监听的位置。查看是否有程序占用端口。2.再输入tasklist|findstr &quot;xxxx&quot; 如(1884),显示，node.exe占用了端口。3.ok，接下来找到进程，把node进程结束，关掉控制台。4.然后重新运行即可解决。]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>端口被占用 常见端口占用的问题 端口占用的解决方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[删除node_modules文件夹，解决目录层次太深删除报错的问题]]></title>
    <url>%2F2017%2F10%2F15%2F%E5%88%A0%E9%99%A4node-modules%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%A7%A3%E5%86%B3%E7%9B%AE%E5%BD%95%E5%B1%82%E6%AC%A1%E5%A4%AA%E6%B7%B1%E5%88%A0%E9%99%A4%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述在使用gulp中，自动生成的node_modules文件夹，因为文件目录太深，无法系统删除，报错。 解决办法： 121. 安装：npm install rimraf -g (全局安装)2. 使用：先定位到目标文件夹的父级目录，然后在命令行输入：rimraf node_modules(也就是目标文件夹) 示例如下：]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>gulp使用技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP常见状态码(200、400、404、500)等错误分析详情]]></title>
    <url>%2F2017%2F10%2F14%2FHTTP%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81-200%E3%80%81400%E3%80%81404%E3%80%81500-%E7%AD%89%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90%E8%AF%A6%E6%83%85%2F</url>
    <content type="text"><![CDATA[常见的HTTP状态码1HTTP状态码，它是用以表示网页服务器HTTP响应状态的3位数字代码。状态码的第一个数字代表了响应的五种状态之一。 一些常见的状态码： 200—服务器成功返回网页 404— 请求的网页不存在 503— 服务不可用 1xx (临时响应) 1····························································· 表示临时响应并需要请求者继续执行操作的状态代码。 代码说明： 100—(继续) 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 101—(切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。 2xx (成功)1............................................................. 表示成功处理了请求的状态代码。 代码说明： 200— (成功) 服务器已成功处理了请求。通常这表示服务器提供了请求的网页。 201— (已创建) 请求成功并且服务器创建了新的资源。 202— (已接受) 服务器已接受请求，但尚未处理。 203— (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。 204— (无内容) 服务器成功处理了请求，但没有返回任何内容。 205— (重置内容) 服务器成功处理了请求，但没有返回任何内容。 206— (部分内容) 服务器成功处理了部分get请求。 3xx (重定向)1............................................................. 表示要完成请求，需要进一步操作。通常这些状态码用来重定向。 代码说明： 300— (多种选择) 针对请求，服务器可执行多种操作。服务器可根据请求者(user agent)选择一项操作，或提供操作列表请求者选择。 301— (永久移动) 请求的网页已永久移动到新位置。服务器返回此响应(对get或head请求的响应)时，会自动将请求者转到新位置。 302— (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 303— (查看其它位置) 请求者应当对不同的位置使用单独的get请求来检索响应时，服务器返回此代码。 304— (未修改) 自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。 305— (使用代理) 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。 307— (临时重定向) 服务器目前从不同位置的网页访响应请求，但请求者应继续使用原有位置来进行以后的请求。 4xx (请求错误)1............................................................. 这些状态码表示请求可能出错，妨碍了服务器的处理。 代码说明： 400— (错误请求) 服务器不理解请求的语法。 401— (未授权) 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。 403— (禁止) 服务器拒绝请求。 404— (未找到) 服务器找不到请求的网页。 405— (方法禁用) 禁用请求中指定的方法。 406— (不接受) 无法使用请求的内容特性响应请求的网页。 407— (需要代理授权) 此状态代码与401(未授权) 类似，但指定请求者应当授权使用代理。 408— (请求超时) 服务器等候请求时发生超时。 409— (冲突) 服务器在完成请求发生冲突。服务器必须在响应中包含有关冲突的信息。 410— (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。 411— (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。 412— (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。 413— (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。 414— (请求的url过长) 请求的URL(通常为网址) 过长，服务器无法处理。 415— (不支持的媒体类型) 请求的格式不受请求页面的支持。 416— (请求范围不符合要求) 如果页面无法提供请求的范围则服务器会返回此状态代码。 417— (未满足期望值) 服务器未满足“期望”请求标头字段的要求。 5xx (服务器错误)1............................................................. 这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。 代码说明： 500— (服务器内部错误) 服务器遇到错误，无法完成请求。 501— (尚未实施) 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。 502— (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。 503— (服务不可用) 服务器目前无法使用(由于超载或停机维护)。通常这只是暂时状态。 504— (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。 505— (HTTP版本不受支持) 服务器不支持请求中所用的HTTP协议版本。]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>HTTP状态码 404错误 服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp的安装和简单使用]]></title>
    <url>%2F2017%2F09%2F23%2Fgulp%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[gulp123456789多个开发者共同开发一个项目，每位开发者负责不同的模块，这就会造成一个完整的项目实际上是由许多的“代码版段”组成的；使用less、sass等一些预处理程序，降低CSS的维护成本，最终需要将这些预处理程序进行解析；合并css、javascript，压缩html、css、javascript、images可以加速网页打开速度，提升性能；这一系列的任务完全靠手动完成几乎是不可能的，借助构建工具可以轻松实现。所谓构建工具是指通过简单配置就可以帮我们实现合并、压缩、校验、预处理等一系列任务的软件工具。常见的构建工具包括：Grunt、Gulp、F.I.S（百度出品）、webpack 1. gulp简介 gulp这个软件是用nodejs写的. gulp是基于流的自动化构建工具 网站开发完成之后,我们要做项目构建,完成之后才可以上线. 项目构建: 代码压缩.html css js 代码混淆 文件合并 等其它自动化工作. sass转换为css. 这就是gulp做的事情. 2. gulp安装 首先需要全局安装gulp,如果之前已经全局安装过,可以省略这步. 123456npm install gulp -g global 全局安装. 会把该软件安装到系统目录中.我们使用npm下载插件,实际上是从https://www.npmjs.com/下载.全局安装的插件 可以在任意的地方使用.本地安装的插件 只能在当前项目中使用.使用gulp -v命令查看安装的gulp版本 如果可以看到就说明安装成功. 还需要本地安装,在项目目录中. 1npm install gulp --save 3. gulp使用 在项目目录中新建1个gulpfile.js文件. 在这个文件中写上构建代码. 先引入本地的gulp模块 12var gulp = require('gulp');//这个gulp对象就可以配合插件来进行构建工作. 3.1 创建任务 gulp是以任务的形式来执行每一项构建化工作. 调用gulp对象的task方法可以创建任务 参数1: 任务名称 参数2: 回调函数,执行该任务的时候,要做的事情. 123gulp.task("testTask",function()&#123; console.log();&#125;); 这个时候,我们就创建了1个任务testTask,该任务做的事情就是回调函数的事情. 3.2 执行任务 如何执行这个gulp任务呢? 打开cmd工具,切换工作路径到项目目录 在命令行窗口中使用gulp 任务名称就可以执行指定的任务. 1gulp testTask 这个时候,名叫testTask的任务就会被执行. 4.压缩CSS gulp-cssmin 需要创建1个压缩css的任务. 12345678910111213141516var cssmin = require("gulp-cssmin");gulp.task("yscss",function () &#123; //1.这个任务是用来压缩css的. // 那么首先你需要指定需要压缩的css文件 // 调用gulp对象的src方法,指定要处理的文件的路径. gulp.src("./src/assets/css/reset.css") .pipe(cssmin()) .pipe(gulp.dest("./dist/assets/css")); //2.pipe()管道理解 阀门形象理解. //3.管道中每一个阀门做不同的事情.不同的事情需要插件来完成. // 压缩css的插件. gulp-cssmin // 安装插件,引入gulp-cssmin // 引入后,其实1个函数. // 将其在管道中调用,相当于在管道中设置了1个阀门. //4.管道最后1关,要调用gulp对象的dest方法,设置存放处理后的路径.&#125;); 5.文件监视 watch gulp对象提供了一个watch方法 该方法的作用,监视指定文件的变化, 一旦改动,就执行指定的任务 1234gulp.task("watchCss",function () &#123; //监视指定的css文件.可以使用通配符,一旦文件发送变化,就自动执行yscss任务 gulp.watch("./src/assets/css/reset.css",["yscss"]);&#125;) watch方法的第2个参数,还可以是1个回调.当文件发生变化以后,就执行这个回调. 5.gulp-uglify 压缩js 压缩混淆js代码,需要gulp-uglify插件支持.使用npm安装该插件. 12345678910//1.引入gulp模块var gulp = require("gulp");//2.引入gulp-uglify模块.返回的是1个函数.var uglify = require("gulp-uglify");//3.新建任务gulp.task("ysjs",function()&#123; gulp.src("./js/app.js") .pipe(uglify()) .pipe(gulp.dest("./dist/js"));&#125;); 6.gulp-concat 合并文件 文件合并需要使用到 gulp-concat插件支持.使用npm安装该插件. 123456gulp.task("concatFile",function()&#123; gulp.src(["./src/js/app.js","./src/js/demo.js"]) .pipe(concat("all.js"))//将待处理的文件进行合并,合并后的新文件的名称为 all.js .pipe(uglify())//再混淆 .pipe(gulp.dest("./dist/js"));&#125;); 7.gulp-htmlmin 压缩html文件 压缩html代码需要使用到 gulp-htmlmin插件支持.使用npm安装该插件. 12345678gulp.task("yshtml",function()&#123; gulp.src("./src/index.html") .pipe(htmlmin(&#123; collapseWhitespace:true, //去空格 removeComments:true//去注释 &#125;)) .pipe(gulp.dest("./dist"))&#125;); 8.gulp-sass 将sass转换为 css123456gulp.task("sass2css",function()&#123; gulp.src("./src/css/index.scss") .pipe(sass()) .pipe(cssmin()) .pipe(gulp.dest("./dist/css"));&#125;); 9. gulp-less 将less转换为 css10. gulp-imagemin 压缩图片]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>自动化构建工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
